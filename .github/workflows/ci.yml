name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: campusflow_dev
          POSTGRES_USER: campusflow
          POSTGRES_DB: campusflow
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('backend/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-
        
    - name: Install backend dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: backend
      run: poetry install --no-interaction --no-root
      
    - name: Install backend project
      working-directory: backend
      run: poetry install --no-interaction
      
    - name: Run backend linting and formatting checks
      working-directory: backend
      run: |
        poetry run black --check --diff .
        poetry run isort --check-only --diff .
        poetry run flake8 .
        poetry run mypy src/
        
    - name: Run backend tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://campusflow:campusflow_dev@localhost:5432/campusflow
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test_secret_key
        GOOGLE_CLIENT_ID: test_client_id
        GOOGLE_CLIENT_SECRET: test_client_secret
      run: poetry run pytest -v --cov=src --cov-report=xml
      
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        fail_ci_if_error: false

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run frontend linting and formatting checks
      working-directory: frontend
      run: |
        npm run lint:check
        npm run format:check
      
    - name: Build frontend
      working-directory: frontend
      run: npm run build
      
    - name: Run frontend tests (if available)
      working-directory: frontend
      run: npm run test || echo "No tests configured"