name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: campusflow_dev
          POSTGRES_USER: campusflow
          POSTGRES_DB: campusflow
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: apps/backend/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install backend dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: apps/backend
      run: poetry install --no-interaction --no-root
      
    - name: Install backend project
      working-directory: apps/backend
      run: poetry install --no-interaction
      
    - name: Run backend linting
      working-directory: apps/backend
      run: |
        poetry run black --check .
        poetry run isort --check-only .
        poetry run flake8 .
        
    - name: Run backend tests
      working-directory: apps/backend
      env:
        DATABASE_URL: postgresql://campusflow:campusflow_dev@localhost:5432/campusflow
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test_secret_key
        GOOGLE_CLIENT_ID: test_client_id
        GOOGLE_CLIENT_SECRET: test_client_secret
      run: poetry run pytest -v --cov=src --cov-report=xml
      
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: apps/backend/coverage.xml
        flags: backend
        fail_ci_if_error: false

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: apps/frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: apps/frontend
      run: npm run lint
      
    - name: Run frontend type checking
      working-directory: apps/frontend
      run: npm run type-check
      
    - name: Build frontend
      working-directory: apps/frontend
      run: npm run build
      
    - name: Run frontend tests (when available)
      working-directory: apps/frontend
      run: npm run test -- --run || echo "No tests found"